CMAKE_MINIMUM_REQUIRED(VERSION 3.5)
PROJECT( superray-gridmap2d )

INCLUDE(GNUInstallDirs)

# COMPILER SETTINGS (default: Release) and flags
SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules")
INCLUDE(CompilerSettings)

# SUPERRAY_GRIDMAP2D_OMP = enable OpenMP parallelization (experimental, defaults to OFF)
SET(SUPERRAY_GRIDMAP2D_OMP FALSE CACHE BOOL "Enable/disable OpenMP parallelization")
IF(DEFINED ENV{SUPERRAY_GRIDMAP2D_OMP})
  SET(SUPERRAY_GRIDMAP2D_OMP $ENV{SUPERRAY_GRIDMAP2D_OMP})
ENDIF(DEFINED ENV{SUPERRAY_GRIDMAP2D_OMP})
IF(SUPERRAY_GRIDMAP2D_OMP)
  FIND_PACKAGE(OpenMP REQUIRED)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
ENDIF(SUPERRAY_GRIDMAP2D_OMP)

# Set output directories for libraries and executables
SET( BASE_DIR ${CMAKE_SOURCE_DIR} )
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${BASE_DIR}/lib )
SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${BASE_DIR}/lib )
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BASE_DIR}/bin )
# output dirs for multi-config builds (MSVC)
FOREACH( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
  STRING( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
  SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${BASE_DIR}/lib )
  SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${BASE_DIR}/lib )
  SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${BASE_DIR}/bin )
ENDFOREACH( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )

SET(INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/include")
INCLUDE_DIRECTORIES(${INCLUDE_DIRS})

LINK_DIRECTORIES(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})

# Installation

SET(INSTALL_TARGETS_DEFAULT_ARGS
  RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
  LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
  ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
)

ADD_SUBDIRECTORY( src/math )
ADD_SUBDIRECTORY( src )

FILE(GLOB SUPERRAY_GRIDMAP2D_HEADERS ${PROJECT_SOURCE_DIR}/include/superray_gridmap2d/*.h ${PROJECT_SOURCE_DIR}/include/superray_gridmap2d/*.hxx)
INSTALL(FILES ${SUPERRAY_GRIDMAP2D_HEADERS} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/superray_gridmap2d")
FILE(GLOB SUPERRAY_GRIDMATH2D_HEADERS ${PROJECT_SOURCE_DIR}/include/superray_gridmap2d/math/*.h)
INSTALL(FILES ${SUPERRAY_GRIDMATH2D_HEADERS} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/superray_gridmap2d/math")

# Install package.xml (catkin/ament/rosdep)
INSTALL(FILES package.xml DESTINATION "${CMAKE_INSTALL_DATADIR}/superray-gridmap2d")

# Allows Colcon to find non-Ament packages when using workspace underlays
FILE(WRITE ${CMAKE_CURRENT_BINARY_DIR}/share/ament_index/resource_index/packages/${PROJECT_NAME} "")
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/share/ament_index/resource_index/packages/${PROJECT_NAME} DESTINATION share/ament_index/resource_index/packages)

# uninstall target
IF(NOT TARGET uninstall)
  CONFIGURE_FILE(
    "${PROJECT_SOURCE_DIR}/CMakeModules/CMakeUninstall.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
    IMMEDIATE @ONLY
  )

  ADD_CUSTOM_TARGET(uninstall
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake
  )
ENDIF()

# Export the package for use from the build-tree
# (this registers the build-tree with a global CMake-registry)
EXPORT(PACKAGE superray-gridmap2d)
 
# Create a superray-gridmap2d-config.cmake file for the use from the build tree
SET(SUPERRAY_GRIDMAP2D_INCLUDE_DIRS "${INCLUDE_DIRS}")
SET(SUPERRAY_GRIDMAP2D_LIB_DIR "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
# Set library names as absolute paths
# Windows, spec. MSVC requires the .lib suffix for imported libs
IF(WIN32)
  SET(SUPERRAY_GRIDMAP2D_LIBRARY "${CMAKE_IMPORT_LIBRARY_PREFIX}superray-gridmap2d${CMAKE_IMPORT_LIBRARY_SUFFIX}")
  SET(SUPERRAY_GRIDMATH2D_LIBRARY "${CMAKE_IMPORT_LIBRARY_PREFIX}superray-gridmath2d${CMAKE_IMPORT_LIBRARY_SUFFIX}")
ELSE()
  SET(SUPERRAY_GRIDMAP2D_LIBRARY "${CMAKE_SHARED_LIBRARY_PREFIX}superray-gridmap2d${CMAKE_SHARED_LIBRARY_SUFFIX}")
  SET(SUPERRAY_GRIDMATH2D_LIBRARY "${CMAKE_SHARED_LIBRARY_PREFIX}superray-gridmath2d${CMAKE_SHARED_LIBRARY_SUFFIX}")
ENDIF()

INCLUDE(CMakePackageConfigHelpers)

CONFIGURE_PACKAGE_CONFIG_FILE(
  superray-gridmap2d-config.cmake.in
  "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/cmake/superray-gridmap2d/superray-gridmap2d-config.cmake"
  PATH_VARS SUPERRAY_GRIDMAP2D_INCLUDE_DIRS SUPERRAY_GRIDMAP2D_LIB_DIR
  INSTALL_DESTINATION "${CMAKE_INSTALL_FULL_DATADIR}/superray-gridmap2d"
)

# Create a superray-gridmap2d-config.cmake file for the use from the install tree and install it
SET(SUPERRAY_GRIDMAP2D_INCLUDE_DIRS "${CMAKE_INSTALL_FULL_INCLUDEDIR}")
SET(SUPERRAY_GRIDMAP2D_LIB_DIR "${CMAKE_INSTALL_FULL_LIBDIR}")

SET(SUPERRAY_GRIDMAP2D_INCLUDE_TARGETS
  "include(\${CMAKE_CURRENT_LIST_DIR}/superray-gridmap2d-targets.cmake)"
)

CONFIGURE_PACKAGE_CONFIG_FILE(
  superray-gridmap2d-config.cmake.in
  "${PROJECT_BINARY_DIR}/InstallFiles/superray-gridmap2d-config.cmake"
  PATH_VARS SUPERRAY_GRIDMAP2D_INCLUDE_DIRS SUPERRAY_GRIDMAP2D_LIB_DIR
  INSTALL_DESTINATION "${CMAKE_INSTALL_FULL_DATADIR}/superray-gridmap2d"
)

INSTALL(FILES
  "${PROJECT_BINARY_DIR}/InstallFiles/superray-gridmap2d-config.cmake"
  DESTINATION "${CMAKE_INSTALL_DATADIR}/superray-gridmap2d"
)

# Finished:
MESSAGE (STATUS "\n")
MESSAGE (STATUS "Compile superray-gridmap2d using: make")
MESSAGE (STATUS "Install superray-gridmap2d using: make install")
MESSAGE (STATUS "    (be sure to set the correct CMAKE_INSTALL_PREFIX before)")